[
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期的定义是什么?",
        "answer": "一个计算机软件从功能确定、设计、开发、测试到投入使用, 并在使用中不断完善的全过程。"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期的阶段有哪些?",
        "answer": "可行性分析-需求分析-总体设计-概要设计-详细设计-编码-测试-维护"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期有哪些常见的模型?",
        "answer": "瀑布模型(软件生命周期各项活动按固定顺序连接); 敏捷开发(通过短周期迭代, 不断交付新的软件版本, 逐步满足客户需求; 比较强调团队协作客户参与和对变化的快速响应); 另外还有螺旋模型、增量模型等等。"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "V模型是什么?",
        "answer": "V模型是一种开发阶段从左到右依次进行的软件开发模型。流程由需求分析到概要设计到详细设计到编码, 再到单元测试、集成测试、系统测试最后验收测试, 测试开发阶段一一对应呈V字形"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "W模型是什么?",
        "answer": "W模型又叫双V模型是一种每个开发阶段对应特定测试阶段的一种软件开发模型, 用户需求对应验收测试设计、需求分析对应系统测试设计、概要设计对应集成测试设计、详细设计对应单元测试设计, 编码对应单元测试、集成对应集成测试、实施对应系统测试、交付对应验收测试。更早进行测试能更早发现问题"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "质量模型是什么?",
        "answer": "质量模型用来描述和评估软件质量, 一般从功能、性能、兼容、易用、安全、可靠、可维护和可移植性这几个方面考虑。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "测试的分类有哪些?(按测试阶段划分)",
        "answer": "按照测试阶段来划分的话, 大概可以分为单元测试, 就是对软件的最小可测单元进行验证。然后是集成测试, 是对各个单元组成的模块之间的接口和集成的功能进行测试。然后是系统测试, 就是在模拟的真实运行环境下对软件的功能、性能等各方面进行全面测试。然后是验收测试, 一般是由相关用户或者独立测试人员验证系统是否满足业务需求和客户要求。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "测试的分类有哪些?(按代码可见度划分)",
        "answer": "按照代码可见度划分, 一般可以分为白盒测试、黑盒测试和灰盒测试。白盒测试是基于程序内部逻辑结构进行测试。黑盒测试不考虑软件内部结构, 从用户需求出发, 关注软件功能是否正确实现。灰盒测试在两者之间, 指在知道部分软件内部结构的情况下关注于功能实现。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "冒烟测试是什么?",
        "answer": "冒烟测试是指在大规模执行测试前对程序主要功能/模块进行验证, 保证程序具有可测性。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "回归测试是什么?",
        "answer": "回归测试是指在软件发生代码修改(功能新增、系统重构)之后, 重新执行全部或者部分以前的测试用例, 验证程序软件原有功能是否正常、新变更是否引入新错误。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "你了解测试流程吗?",
        "answer": "测试流程一般有需求分析、测试计划编写、测试用例设计、测试用例执行、缺陷跟踪管理到测试报告生成。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "在需求分析阶段测试人员为什么要参与?",
        "answer": "确保各部门之间需求理解一致, 可以查漏补缺。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "测试计划要有哪些内容?",
        "answer": "测什么?谁来测?怎么测?测什么就是确定测试目标和范围; 谁来测是来确定人员进度安排; 怎么测是确定测试策略、测试工具、测试环境等。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "缺陷的定义是什么?",
        "answer": "软件使用过程中存在的任何问题。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "缺陷的判断标准是什么?",
        "answer": "看用户需求规格说明书, 一般有少功能、多功能、功能错误、隐性的功能错误、不易使用这些方面。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的类型有哪些?",
        "answer": "软件缺陷类型有功能缺陷、界面缺陷、兼容性、易用性等。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的提交要素有哪些?",
        "answer": "一般有缺陷ID、缺陷标题、所属模块、状态、优先级、缺陷描述(包括前置条件、复现步骤、期望结果和实际结果), 最后附上附件作证明。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的跟踪流程是什么?",
        "answer": "一般由测试人员提交缺陷、分派缺陷, 再由开发人员进行确定, 看bug是否重复提交、是否确定是bug、是否推迟处理, 然后在后续版本中修复, 测试人员进行回归测试后, 测试通过关闭, 未通过重新打开。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "测试报告要有哪些内容?",
        "answer": "测试报告一般要有测试目标、测试过程、测试范围、测试结果(包括缺陷统计和分析)、测试结论。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "测试用例的要素有哪些?",
        "answer": "一般由用例ID、用例标题、所属模块、优先级、前置条件、测试数据、测试步骤、预期结果组成。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "你知道哪些测试用例的设计方法?",
        "answer": "一般有等价类划分法、边界值分析法、判定表法、因果图法、错误推断法、场景法。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下等价类划分法?",
        "answer": "等价类划分法主要是针对有大量数据输入但无法穷举的场景, 将程序的输入划分为若干个等价类, 等价类是输入中具有某种共同特征的数据子集, 然后从每个等价类中选取代表性的数据来测试, 这样能提升测试效率并保证测试的完整性。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下边界值分析法?",
        "answer": "边界值分析法一般和等价类划分法结合使用, 因为很多软件缺陷出现在输入边界上而非内部, 所以边界值分析法重点关注边界值情况, 在划分的等价类的边界（比如上点离点）进行测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下判定表法?",
        "answer": "判定表法用于分析多条件逻辑判断, 将复杂的条件组合和对应的动作以表格形式呈现。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下因果图法?",
        "answer": "因果图法通过图形符号表示输入条件和输出结果之间关系, 适用于描述多种条件的组合, 并产生多个不同结果的情况, 核心在于考虑输入条件之间的相互制约及组合关系, 以及输出结果对输入条件的依赖关系。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "判定表法和因果图法有什么异同?",
        "answer": "判定表法和因果图法的相同点在于都是为了更全面有效地找出系统在不同输入条件组合下的输出情况。不同点在于判定表法侧重于对输入条件组合的穷举分析, 不强调条件之间的逻辑关系, 适用于输入条件较少、相互关系相对简单的情况, 比如简单的登录功能; 而因果图法则更注重分析输入条件之间的因果关系, 以及输入和输出之间的约束关系, 适用于输入条件较多、相互关系复杂的情况, 比如电商的促销活动。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下错误推断法?",
        "answer": "错误推断法基于测试人员的经验来推测系统可能出现错误的地方, 并针对性地设计测试用例。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下场景法?",
        "answer": "场景法针对业务场景, 通过模拟用户在实际使用软件过程中的各种场景来进行测试。可以在编写时弄清业务的流程图, 了解业务的成功条件和失败条件, 以此来编写正向的、反向的用例。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "什么是接口?",
        "answer": "接口是系统与系统之间/组件与组件之间数据传递交互的通道。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "请求的结构是什么?",
        "answer": "请求一般包括请求行、请求头、请求体, 请求行里是URL、请求方法、协议版本; 请求头里一般常用有content-type; 还有认证的TOKEN之类的。请求体就是要发送的数据。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "你知道接口文档的结构吗?",
        "answer": "一般有接口名称、接口地址、请求方式、接口描述、请求参数、响应参数等。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试的测试用例要有哪些?",
        "answer": "一般有用例子ID、用例名、模块、优先级、前置条件、URL、请求方法、请求头、请求体、预期结果、实际结果。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试的测试点有哪些?",
        "answer": "从功能方面一般有单接口测试, 主要是从参数和数值方面考虑, 参数就是多参、少参、无参和错参, 数值上类似功能测试使用等价类划分的方法; 还可以多接口测试一, 个用例覆盖多个接口。另外就是从性能上比如响应时间或者从安全上比如SQL注入等方面考虑。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试如果网络不稳定导致响应时间长怎么办?",
        "answer": ""
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的目的是什么?",
        "answer": "性能测试的目的主要是为了评估当前系统能力; 寻找性能瓶颈, 优化性能; 评估是否满足未来的需要。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试和功能测试有什么不同?",
        "answer": "性能测试关注的重点在于时间和资源方面的非功能性需求。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的策略有哪些?",
        "answer": "常见的有基准测试、负载测试、稳定性测试、压力测试、并发测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下基准测试",
        "answer": "基准测试通过基准测试环境下的测试, 可以知晓系统基础性能表现, 为后续性能优化提供原始参照数据。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下压力测试",
        "answer": "压力测试在高负载的情况下, 看看系统峰值时的容错能力、可恢复能力。。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下稳定性测试",
        "answer": "稳定性测试是正常负载下长时间的稳定运行测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下并发测试",
        "answer": "并发测试是在同一时间发送多个请求, 主要是检查系统有没有并发问题。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下负载测试",
        "answer": "负载测试逐步增加系统负载, 寻找满足性能指标情况下的最大负载量"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的指标有哪些?",
        "answer": "常见的有响应时间、并发数、资源利用率、吞吐量、点击率、错误率。响应时间是指客户端从发送请求到接收到响应的总时间。并发数是指同一时刻向服务器发送请求的用户数。资源利用率就是系统各种资源比如CPU、内存的使用情况。吞吐量是指系统单位时间内处理的客户端请求数。点击率是指一个页面之内所有元素的请求总数量。错误率是指系统在负载情况下业务失败的概率。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "吞吐量的单位是什么?",
        "answer": "存储量的单位有 TPS 和 QPS, TPS 是服务器每秒处理的事务请求数量, QPS 是服务器每秒处理的查询请求数量, 一个事务可能会对应一个或多个查询。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的流程是什么?",
        "answer": "性能测试流程有性能需求分析、性能测试计划设、性能测试用例设计、性能测试执行和调优、测试报告生成。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的测试用例要素有哪些?",
        "answer": "性能测试的测试用例要素有用例ID、用例标题、用例描述、前置条件、测试步骤、预期结果和实际结果, 实际结果包含系统事务性能指标、应用服务器和数据库服务器的资源利用率。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler的工作原理是什么?",
        "answer": "Fiddler是一个HTTP代理服务器, 本地应用与服务器之间所有的请求和响应都由其进行中转, 因此Fiddler能够截取数据信息, 显示网络数据的抓包内容。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler与F12有什么区别?",
        "answer": "F12是浏览器内置工具, 仅针对当前网页, 强在前端调试, 操作更轻量, 适合快速定位页面问题; Fiddler是独立抓包工具, 能捕获所有设备/应用的HTTP请求, 功能更强大。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler的典型应用场景有哪些?",
        "answer": "可以用来辅助定位前后端的 bug; 可以构建模拟测试场景, 比如模拟发送请求进行接口测试, 比如 mock 接口返回数据; 还可以模拟弱网环境进行测试; 还可以对前端的性能进行分析。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Postman",
        "question": "你对Postman有什么了解?",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "JMeter",
        "question": "你对JMeter有什么了解?",
        "answer": "JMeter 是一款开源的性能测试工具,  常用于对软件应用程序进行负载测试、性能测试等。JMeter 可模拟多用户并发访问、支持多种协议（如 HTTP、FTP 等）、能生成详细的测试报告。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "requests库",
        "question": "你对requests库有什么了解?",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "pytest库",
        "question": "你对pytest库有什么了解?",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "selenium库",
        "question": "你对selenium库有什么了解?",
        "answer": ""
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的数据类型你都有哪些了解?",
        "answer": "有数字类型, 如整型浮点型; 有序列类型, 如字符串、列表、元组; 有集合类型; 映射类型（字典）;布尔类型。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python迭代器了解吗?",
        "answer": "迭代器会按需生成数据, 只有在用 next() 函数或者通过循环去访问的时候才会生成相应元素, 可以节省内存。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python生成器了解吗?",
        "answer": "生成器一种特殊的迭代器, 有yield关键字, 执行到它会暂停并返回值, 再次调用会从暂停处继续。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python闭包了解吗?闭包的意义和使用场景?",
        "answer": "当一个函数嵌套在另一个函数内部, 并且内部函数引用了外部函数的变量时, 就形成了闭包。即使外部函数已经执行完毕, 闭包仍然可以访问外部函数的变量。所以可以将一些数据封装在闭包内部, 外部无法直接访问, 只能通过闭包提供的方法来操作。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python装饰器了解吗?",
        "answer": "装饰器给原函数套了一个壳, 在原函数执行前后增加额外操作,可以在不更改原函数的情况下增加功能。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "JavaScript的数据类型你都有哪些了解?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "SQL的范式是什么?",
        "answer": "第一范式要求数据库中的每一列都是不能再分的基本数据项。第二范式要求非主属性完全依赖于主键。第三, 范式要求任何非主属性都不能依赖于其他非主属性。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "数据库的事务是什么?",
        "answer": "数据库的事务是多个语句做一个整体执行, 具有原子性、一致性、隔离性和持久性。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "数据库主键和外键是什么?",
        "answer": "主键是表中能够唯一标识每一行记录的一个或多个字段组合。外键是表中的一个或多个字段组合, 它的值和另一个表中的主键相匹配, 这样可以建立表之间的联系   "
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "介绍一下数据库索引。",
        "answer": "索引是一种特殊的数据结构, 用来快速的定位和访问数据表中的数据。常见的索引有普通索引、唯一索引和组合索引。在存储结构上有哈希索引、B树索引、B+树索引。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "介绍一下哈希/B树/B+树索引。",
        "answer": "哈希索引通过 HASH 函数将索引键值映射到存储位置。等值查询速度快, 但不支持范围查询。B树索引所有节点都存有键值。支持等值查询和范围查询, 但插入和删除的操作比较复杂。B+树索引非叶节点只有键, 叶子节点有值且通过有序链表连接, 适合顺序访问和范围查询。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "MySQL查询语句谓词的执行顺序是什么?",
        "answer": "From Where Groupby Having Select Orderby"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "非关系型数据库了解多少？",
        "answer": "MongoDB是一种面向文档的非关系型数据管理系统。它没有特定的结构, 不需要先定义表, 灵活可扩展。适合存储结构不同的数据, 比如日志。Redis 是一种键值型的的内存数据库, 适合作为缓存、消息队列、分布式锁。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "介绍一下计算机网络的分层模型。",
        "answer": "OSI 七层模型从上到下是应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。应用层直接为应用程序提供服务; 表示层用来处理数据的表示和转换; 会话层用来管理会话; 传输层提供主机之间端到端的通信; 网络层处理网络之间的通信，数据链路层保障数据帧的传输和接收，物理层负责物理介质上的信号传输"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "计算机网络网络层的协议有哪些?",
        "answer": "IP协议为每个网络设备分配唯一的 IP 地址，负责将数据包从源地址传输到目的地址。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "计算机网络传输层的协议有哪些?",
        "answer": "TCP传输控制协议提供面向连接可靠的字节流传输; UDP用户数据报协议提供无连接的不可靠的但高效的数据传输服务。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP/HTTPS协议是什么?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议的请求和响应格式是什么?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议常见的状态码有哪些?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议的请求方法有哪些?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "Socket协议了解吗?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "CORS跨域资源共享是什么?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "Cookie, Session, Token是什么? 有什么关系?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "Linux",
        "question": "Linux的常用命令有哪些?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "Linux",
        "question": "Shell脚本方面有哪些了解?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "Git",
        "question": "Git的常用命令有哪些?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "Docker",
        "question": "Docker是什么? 和虚拟机有什么区别?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "工作(沟通)",
        "question": "如果你提交了缺陷, 开发说这不是BUG怎么办?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你觉得你有什么优缺点?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你的职业规划是什么?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你为什么选择测试?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你有什么想问我的吗?",
        "answer": ""
    }
]