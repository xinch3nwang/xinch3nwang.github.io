[
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期的定义是什么?",
        "answer": "一个计算机软件从功能确定、设计、开发、测试到投入使用, 并在使用中不断完善的全过程。"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期的阶段有哪些?",
        "answer": "可行性分析-需求分析-总体设计-概要设计-详细设计-编码-测试-维护"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "软件生命周期有哪些常见的模型?",
        "answer": "瀑布模型(软件生命周期各项活动按固定顺序连接); 敏捷开发(通过短周期迭代, 不断交付新的软件版本, 逐步满足客户需求; 比较强调团队协作客户参与和对变化的快速响应); 另外还有螺旋模型、增量模型等等。"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "V模型是什么?",
        "answer": "V模型是一种开发阶段从左到右依次进行的软件开发模型。流程由需求分析到概要设计到详细设计到编码, 再到单元测试、集成测试、系统测试最后验收测试, 测试开发阶段一一对应呈V字形"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "W模型是什么?",
        "answer": "W模型又叫双V模型是一种每个开发阶段对应特定测试阶段的一种软件开发模型, 用户需求对应验收测试设计、需求分析对应系统测试设计、概要设计对应集成测试设计、详细设计对应单元测试设计, 编码对应单元测试、集成对应集成测试、实施对应系统测试、交付对应验收测试。更早进行测试能更早发现问题"
    },
    {
        "category": "测试基础",
        "subcategory": "软件生命周期",
        "question": "质量模型是什么?",
        "answer": "质量模型用来描述和评估软件质量, 一般从功能、性能、兼容、易用、安全、可靠、可维护和可移植性这几个方面考虑。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "测试的分类有哪些?(按测试阶段划分)",
        "answer": "按照测试阶段来划分的话, 大概可以分为单元测试, 就是对软件的最小可测单元进行验证。然后是集成测试, 是对各个单元组成的模块之间的接口和集成的功能进行测试。然后是系统测试, 就是在模拟的真实运行环境下对软件的功能、性能等各方面进行全面测试。然后是验收测试, 一般是由相关用户或者独立测试人员验证系统是否满足业务需求和客户要求。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "测试的分类有哪些?(按代码可见度划分)",
        "answer": "按照代码可见度划分, 一般可以分为白盒测试、黑盒测试和灰盒测试。白盒测试是基于程序内部逻辑结构进行测试。黑盒测试不考虑软件内部结构, 从用户需求出发, 关注软件功能是否正确实现。灰盒测试在两者之间, 指在知道部分软件内部结构的情况下关注于功能实现。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "冒烟测试是什么?",
        "answer": "冒烟测试是指在大规模执行测试前对程序主要功能/模块进行验证, 保证程序具有可测性。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试分类",
        "question": "回归测试是什么?",
        "answer": "回归测试是指在软件发生代码修改(功能新增、系统重构)之后, 重新执行全部或者部分以前的测试用例, 验证程序软件原有功能是否正常、新变更是否引入新错误。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "你了解测试流程吗?",
        "answer": "测试流程一般有需求分析、测试计划编写、测试用例设计、测试用例执行、缺陷跟踪管理到测试报告生成。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "在需求分析阶段测试人员为什么要参与?",
        "answer": "确保各部门之间需求理解一致, 可以查漏补缺。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "测试计划要有哪些内容?",
        "answer": "测什么?谁来测?怎么测?测什么就是确定测试目标和范围; 谁来测是来确定人员进度安排; 怎么测是确定测试策略、测试工具、测试环境等。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "缺陷的定义是什么?",
        "answer": "软件使用过程中存在的任何问题。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "缺陷的判断标准是什么?",
        "answer": "看用户需求规格说明书, 一般有少功能、多功能、功能错误、隐性的功能错误、不易使用这些方面。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的类型有哪些?",
        "answer": "软件缺陷类型有功能缺陷、界面缺陷、兼容性、易用性等。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的提交要素有哪些?",
        "answer": "一般有缺陷ID、缺陷标题、所属模块、状态、优先级、缺陷描述(包括前置条件、复现步骤、期望结果和实际结果), 最后附上附件作证明。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "软件缺陷的跟踪流程是什么?",
        "answer": "一般由测试人员提交缺陷、分派缺陷, 再由开发人员进行确定, 看bug是否重复提交、是否确定是bug、是否推迟处理, 然后在后续版本中修复, 测试人员进行回归测试后, 测试通过关闭, 未通过重新打开。"
    },
    {
        "category": "测试基础",
        "subcategory": "测试流程",
        "question": "测试报告要有哪些内容?",
        "answer": "测试报告一般要有测试目标、测试过程、测试范围、测试结果(包括缺陷统计和分析)、测试结论。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "测试用例的要素有哪些?",
        "answer": "一般由用例ID、用例标题、所属模块、优先级、前置条件、测试数据、测试步骤、预期结果组成。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "你知道哪些测试用例的设计方法?",
        "answer": "一般有等价类划分法、边界值分析法、判定表法、因果图法、错误推断法、场景法。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下等价类划分法?",
        "answer": "等价类划分法主要是针对有大量数据输入但无法穷举的场景, 将程序的输入划分为若干个等价类, 等价类是输入中具有某种共同特征的数据子集, 然后从每个等价类中选取代表性的数据来测试, 这样能提升测试效率并保证测试的完整性。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下边界值分析法?",
        "answer": "边界值分析法一般和等价类划分法结合使用, 因为很多软件缺陷出现在输入边界上而非内部, 所以边界值分析法重点关注边界值情况, 在划分的等价类的边界(比如上点离点)进行测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下判定表法?",
        "answer": "判定表法用于分析多条件逻辑判断, 将复杂的条件组合和对应的动作以表格形式呈现。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下因果图法?",
        "answer": "因果图法通过图形符号表示输入条件和输出结果之间关系, 适用于描述多种条件的组合, 并产生多个不同结果的情况, 核心在于考虑输入条件之间的相互制约及组合关系, 以及输出结果对输入条件的依赖关系。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "判定表法和因果图法有什么异同?",
        "answer": "判定表法和因果图法的相同点在于都是为了更全面有效地找出系统在不同输入条件组合下的输出情况。不同点在于判定表法侧重于对输入条件组合的穷举分析, 不强调条件之间的逻辑关系, 适用于输入条件较少、相互关系相对简单的情况, 比如简单的登录功能; 而因果图法则更注重分析输入条件之间的因果关系, 以及输入和输出之间的约束关系, 适用于输入条件较多、相互关系复杂的情况, 比如电商的促销活动。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下错误推断法?",
        "answer": "错误推断法基于测试人员的经验来推测系统可能出现错误的地方, 并针对性地设计测试用例。"
    },
    {
        "category": "测试基础",
        "subcategory": "功能测试",
        "question": "介绍一下场景法?",
        "answer": "场景法针对业务场景, 通过模拟用户在实际使用软件过程中的各种场景来进行测试。可以在编写时弄清业务的流程图, 了解业务的成功条件和失败条件, 以此来编写正向的、反向的用例。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "什么是接口?",
        "answer": "接口是系统与系统之间/组件与组件之间数据传递交互的通道。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "请求的结构是什么?",
        "answer": "请求一般包括请求行、请求头、请求体, 请求行里是URL、请求方法、协议版本; 请求头里一般常用有content-type; 还有认证的TOKEN之类的。请求体就是要发送的数据。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "你知道接口文档的结构吗?",
        "answer": "一般有接口名称、接口地址、请求方式、接口描述、请求参数、响应参数等。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试的测试用例要有哪些?",
        "answer": "一般有用例子ID、用例名、模块、优先级、前置条件、URL、请求方法、请求头、请求体、预期结果、实际结果。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试的测试点有哪些?",
        "answer": "从功能方面一般有单接口测试, 主要是从参数和数值方面考虑, 参数就是多参、少参、无参和错参, 数值上类似功能测试使用等价类划分的方法; 还可以多接口测试一, 个用例覆盖多个接口。另外就是从性能上比如响应时间或者从安全上比如SQL注入等方面考虑。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试如果网络不稳定导致响应时间长怎么办?",
        "answer": ""
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试如果响应时间长怎么办?",
        "answer": "可以考虑使用异步接口, 比如消息队列, 可以把耗时的操作放到消息队列中, 然后接口直接返回成功, 异步处理。"
    },
    {
        "category": "测试基础",
        "subcategory": "接口测试",
        "question": "接口测试如何处理接口依赖（如 Token 动态获取）？",
        "answer": "可以考虑使用前置条件, 比如先登录获取Token, 然后再调用其他接口。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的目的是什么?",
        "answer": "性能测试的目的主要是为了评估当前系统能力; 寻找性能瓶颈, 优化性能; 评估是否满足未来的需要。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试和功能测试有什么不同?",
        "answer": "性能测试关注的重点在于时间和资源方面的非功能性需求。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的策略有哪些?",
        "answer": "常见的有基准测试、负载测试、稳定性测试、压力测试、并发测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下基准测试",
        "answer": "基准测试通过基准测试环境下的测试, 可以知晓系统基础性能表现, 为后续性能优化提供原始参照数据。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下压力测试",
        "answer": "压力测试在高负载的情况下, 看看系统峰值时的容错能力、可恢复能力。。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下稳定性测试",
        "answer": "稳定性测试是正常负载下长时间的稳定运行测试。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下并发测试",
        "answer": "并发测试是在同一时间发送多个请求, 主要是检查系统有没有并发问题。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "请介绍一下负载测试",
        "answer": "负载测试逐步增加系统负载, 寻找满足性能指标情况下的最大负载量"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的指标有哪些?",
        "answer": "常见的有响应时间、并发数、资源利用率、吞吐量、点击率、错误率。响应时间是指客户端从发送请求到接收到响应的总时间。并发数是指同一时刻向服务器发送请求的用户数。资源利用率就是系统各种资源比如CPU、内存的使用情况。吞吐量是指系统单位时间内处理的客户端请求数。点击率是指一个页面之内所有元素的请求总数量。错误率是指系统在负载情况下业务失败的概率。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "吞吐量的单位是什么?",
        "answer": "存储量的单位有 TPS 和 QPS, TPS 是服务器每秒处理的事务请求数量, QPS 是服务器每秒处理的查询请求数量, 一个事务可能会对应一个或多个查询。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的流程是什么?",
        "answer": "性能测试流程有性能需求分析、性能测试计划设、性能测试用例设计、性能测试执行和调优、测试报告生成。"
    },
    {
        "category": "测试基础",
        "subcategory": "性能测试",
        "question": "性能测试的测试用例要素有哪些?",
        "answer": "性能测试的测试用例要素有用例ID、用例标题、用例描述、前置条件、测试步骤、预期结果和实际结果, 实际结果包含系统事务性能指标、应用服务器和数据库服务器的资源利用率。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler的工作原理是什么?",
        "answer": "Fiddler是一个HTTP代理服务器, 本地应用与服务器之间所有的请求和响应都由其进行中转, 因此Fiddler能够截取数据信息, 显示网络数据的抓包内容。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler与F12有什么区别?",
        "answer": "F12是浏览器内置工具, 仅针对当前网页, 强在前端调试, 操作更轻量, 适合快速定位页面问题; Fiddler是独立抓包工具, 能捕获所有设备/应用的HTTP请求, 功能更强大。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Fiddler",
        "question": "Fiddler的典型应用场景有哪些?",
        "answer": "可以用来辅助定位前后端的 bug; 可以构建模拟测试场景, 比如模拟发送请求进行接口测试, 比如 mock 接口返回数据; 还可以模拟弱网环境进行测试; 还可以对前端的性能进行分析。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "Postman",
        "question": "你对Postman有什么了解?",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "JMeter",
        "question": "你对JMeter有什么了解?",
        "answer": "JMeter 是一款开源的性能测试工具, 常用于对软件应用程序进行负载测试、性能测试等。JMeter 可模拟多用户并发访问、支持多种协议(如 HTTP、FTP 等)、能生成详细的测试报告。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "用 requests 库发送 POST 请求，如何传递 JSON 数据和文件？",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "unittest 和 pytest 的区别？你更倾向用哪个？为什么？",
        "answer": "unittest 是 Python 内置标准库，基于类,需继承TestCase，需用特定断言方法，适合轻量场景比如做单元测试；pytest 是第三方框架，语法简洁（用 assert）、夹具灵活、插件丰富（如参数化、并行测试），适合复杂项目。更倾向 pytest，因其开发效率高、生态完善，能显著提升测试体验和代码质量。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "pytest 中如何实现参数化？",
        "answer": "pytest 中可以通过 parametrize 装饰器实现参数化。第一个参数是字符串，为测试函数的参数名。第二个参数是列表，包含多组测试数据。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "pytest 中如何实现测试用例的依赖/如何用 fixture 管理测试前置/后置条件？？",
        "answer": "用 @pytest.fixture 装饰器定义，通过 yield 分隔：yield 前的代码为前置操作（如创建资源）。yield 后的值会作为参数注入测试函数。测试结束后（无论成败），执行 yield 后的后置操作（如清理资源）。测试函数通过参数声明依赖的 fixture，支持多 fixture 组合。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "Selenium 如何处理异步加载元素/动态元素等待?",
        "answer": "使用显式等待（Explicit Wait），结合 WebDriverWait 和 expected_conditions。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "Selenium如何处理弹窗、多窗口和多标签页?",
        "answer": "使用 switch_to.alert() 或 driver.switch_to.window() 或 driver.switch_to.frame() 方法。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "Selenium如何处理文件上传?",
        "answer": "使用 send_keys() 方法。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "Selenium如何定位动态元素（动态元素指的是网页在加载后，会随着用户操作、时间推移或数据更新而发生变化的元素）？",
        "answer": ""
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "如何设计 Page Object Model(POM)？​",
        "answer": "PO模式就是把每个页面看为一个对象，页面元素定位作为属性。页面元素操作作为方法。测试用例执行调用页面对象，实现了业务逻辑和元素定位的分离。"
    },
    {
        "category": "测试工具&框架",
        "subcategory": "自动化测试",
        "question": "如何实现自动化测试失败重试？",
        "answer": "可以使用 pytest 的 pytest-rerunfailures 插件。然后通过命令行或者装饰器设置reruns。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的数据类型你都有哪些了解?",
        "answer": "有数字类型, 如整型浮点型; 有序列类型, 如字符串、列表、元组; 有集合类型; 映射类型(字典);布尔类型。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的可变类型和不可变类型有哪些?",
        "answer": "可变类型有列表、字典、集合; 不可变类型有字符串、元组、数字。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python ​​列表和元组的区别?",
        "answer": "列表是可变的, 元组是不可变的。列表用方括号表示, 元组用圆括号表示。列表可以进行增删改查, 元组不能进行修改。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的字典是什么?如何合并字典？",
        "answer": "字典是一种键值对的数据结构, 由键和值组成, 键必须是不可变类型, 值可以是任意类型。合并字典可以使用 update() 方法（dict2.update(dict1)）,或者字典推导式，或者解包操作符**。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的集合是什么?",
        "answer": "集合是一种无序且不重复的元素集合, 可以进行交集、并集、差集等操作。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python的字符串是什么?",
        "answer": "字符串是由字符组成的不可变序列, 可以进行切片、拼接、查找等操作。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python如何实现列表去重？",
        "answer": "可以使用 set 集合去重。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python迭代器了解吗?",
        "answer": "迭代器会按需生成数据, 只有在用 next() 函数或者通过循环去访问的时候才会生成相应元素, 可以节省内存。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python生成器了解吗?",
        "answer": "生成器一种特殊的迭代器, 有yield关键字, 执行到它会暂停并返回值, 再次调用会从暂停处继续。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python闭包了解吗?闭包的意义和使用场景?",
        "answer": "当一个函数嵌套在另一个函数内部, 并且内部函数引用了外部函数的变量时, 就形成了闭包。即使外部函数已经执行完毕, 闭包仍然可以访问外部函数的变量。所以可以将一些数据封装在闭包内部, 外部无法直接访问, 只能通过闭包提供的方法来操作。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python装饰器了解吗?",
        "answer": "装饰器给原函数套了一个壳, 在原函数执行前后增加额外操作,可以在不更改原函数的情况下增加功能。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python中如何实现多进程?多线程?协程?",
        "answer": "可以使用 multiprocessing 模块来实现多进程。可以使用 threading 模块来实现多线程。可以使用 asyncio 模块来实现协程。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "如何用 Python 模拟高并发请求？​",
        "answer": "可以使用 threading+requests/ asyncio+aiohttp 来模拟高并发请求。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "解释 Python里 *args 和 **kwargs 的作用？​",
        "answer": "*args 用于接收任意数量的位置参数, 以元组形式存储。**kwargs 用于接收任意数量的关键字参数, 以字典形式存储。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python 用 with 语句处理文件操作的优点是什么？​",
        "answer": "with 语句会自动关闭文件, 避免资源泄漏, 还能自动处理异常。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python 如何读取 Excel 测试数据？​",
        "answer": "可以使用 openpyxl 库(workbook、sheet)来读取 Excel 测试数据。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "单例模式如何用 Python 实现？​",
        "answer": "可以使用元类来实现单例模式。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "Python 如何用 pdb 或 logging 调试测试脚本？​",
        "answer": "可以使用 pdb 库来调试测试脚本。可以使用 logging 库来记录日志。"
    },
    {
        "category": "编程语言",
        "subcategory": "Python",
        "question": "如何用 Python 实现测试数据工厂（Test Data Factory）？​",
        "answer": "可以使用 Factory Boy 库来实现测试数据工厂。"
    },
    {
        "category": "编程语言",
        "subcategory": "前端",
        "question": "JavaScript的数据类型你都有哪些了解?",
        "answer": ""
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "SQL的范式是什么?",
        "answer": "第一范式要求数据库中的每一列都是不能再分的基本数据项。第二范式要求非主属性完全依赖于主键。第三, 范式要求任何非主属性都不能依赖于其他非主属性。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "数据库的事务是什么?",
        "answer": "数据库的事务是多个语句做一个整体执行, 具有原子性、一致性、隔离性和持久性。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "数据库主键和外键是什么?",
        "answer": "主键是表中能够唯一标识每一行记录的一个或多个字段组合。外键是表中的一个或多个字段组合, 它的值和另一个表中的主键相匹配, 这样可以建立表之间的联系   "
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "介绍一下数据库索引。",
        "answer": "索引是一种特殊的数据结构, 用来快速的定位和访问数据表中的数据。常见的索引有普通索引、唯一索引和组合索引。在存储结构上有哈希索引、B树索引、B+树索引。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "介绍一下哈希/B树/B+树索引。",
        "answer": "哈希索引通过 HASH 函数将索引键值映射到存储位置。等值查询速度快, 但不支持范围查询。B树索引所有节点都存有键值。支持等值查询和范围查询, 但插入和删除的操作比较复杂。B+树索引非叶节点只有键, 叶子节点有值且通过有序链表连接, 适合顺序访问和范围查询。"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "MySQL查询语句谓词的执行顺序是什么?",
        "answer": "From Where Groupby Having Select Orderby"
    },
    {
        "category": "其他基础",
        "subcategory": "数据库",
        "question": "非关系型数据库了解多少？",
        "answer": "MongoDB是一种面向文档的非关系型数据管理系统。它没有特定的结构, 不需要先定义表, 灵活可扩展。适合存储结构不同的数据, 比如日志。Redis 是一种键值型的的内存数据库, 适合作为缓存、消息队列、分布式锁。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "介绍一下计算机网络的分层模型。",
        "answer": "OSI 七层模型从上到下是应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。应用层直接为应用程序提供服务; 表示层用来处理数据的表示和转换; 会话层用来管理会话; 传输层提供主机之间端到端的通信; 网络层处理网络之间的通信, 数据链路层保障数据帧的传输和接收, 物理层负责物理介质上的信号传输"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "计算机网络网络层的协议有哪些?",
        "answer": "IP协议为每个网络设备分配唯一的 IP 地址, 负责将数据包从源地址传输到目的地址。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "计算机网络传输层的协议有哪些?",
        "answer": "TCP传输控制协议提供面向连接可靠的字节流传输; UDP用户数据报协议提供无连接的不可靠的但高效的数据传输服务。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "TCP协议的三次握手?",
        "answer": "TCP 协议的三次握手是在连接建立的时候使用的。第一次握手客户端向服务器发送一个同步报文段表示想和服务器建立连接, 包含一个客户端初始序列号。第二次握手是服务器接收到客户端的同步报文段之后会发送同步和确认报文段, 同步报文段包含服务器的初始序列号, 确认报文段是对客户端同步报文段的确认, 确认号是客户端序列号加一。第三次握手是客户端收到服务器的同步和确认报文段之后会发送一个确认报文段, 确认号是服务器序列号加一, 表示收到了服务器的同步报文段, 就此就建立了连接。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "TCP协议的四次挥手?",
        "answer": "TCP 协议的四次挥手是在连接断开的四个阶段。第一次挥手, 主动关闭方会发送一个结束报文段, 告知对方自己没有数据要发送。第二次挥手, 被动关闭方收到结束报文段会发送一个确认报文段作为应答, 这个时候被动关闭方知道主动关闭方要关闭连接, 但是被动关闭方可能还有数据要发送。第三次挥手, 等到所有数据发送完毕之后, 被动关闭方会发送一个结束报文段。第四次挥手, 主动关闭方接收到结束报文段会发送一个确认报文段作为应答, 然后等待两倍最长报文段寿命后关闭连接, 被动关闭方收到确认报文段后关闭连接。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP/HTTPS协议是什么?",
        "answer": "HTTP是超文本传输协议, 基于请求与响应模型运作, 端口号80。HTTPS是HTTP的安全版本, 它使用SSL/TLS协议进行加密通信, 端口号443。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议的响应格式是什么?",
        "answer": "响应的格式包括状态行、响应头、空行和响应体。状态行包括协议版本、状态码、状态描述。响应头包括服务器信息、日期、内容类型、内容长度等。响应体是服务器返回的数据。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议常见的状态码有哪些?",
        "answer": "常见的状态吗码: 2开头是成功。3开头是重定向, 5开头是服务器错误, 4开头是客户端错误, 其中402身份未验证, 403是请求被拒绝, 404是资源未找到。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "HTTP协议的请求方法有哪些?",
        "answer": "常见的有 GET 用来获取资源, POST 用来提交数据, PUT 用来更新资源, DELETE 用来删除指定资源, HEAD 用来获取资源的头部信息, OPTIONS 做一些预检操作, 比如跨源资源共享。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "WebSocket协议了解吗?",
        "answer": "WebSocket在HTTP握手后, 在单个TCP连接上进行全双工通信, 允许服务器主动向客户端推送数据, 使得客户端、服务器可以实时双向通信。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "Socket协议了解吗?",
        "answer": "Socket是一种用于网络编程的接口, 通过它可实现不同主机上进程间的通信。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "RPC协议了解吗?",
        "answer": "RPC是一种远程过程调用协议, 允许客户端像调用本地方法一样调用远程服务。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "RESTful API了解吗?",
        "answer": "RESTful API是一种基于HTTP协议的设计风格, 它使用标准的HTTP方法(GET、POST、PUT、DELETE)来操作资源。" 
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "CORS跨源资源共享是什么?",
        "answer": "和跨源资源共享是一种浏览器的安全机制, 浏览器在向服务器发送跨源请求时, 会向服务器询问是否能接受当前源的请求。服务器会在响应头添加相关字段, 如果同意的话, 浏览器就会继续发送数据。如果不同意, 浏览器就会阻止该请求并抛出错误。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "Cookie, Session, Token是什么? 有什么关系?",
        "answer": "Cookie 是存储在客户端(比如浏览器 )中的一小段数据, session 是服务器端为每个会话用户创建的存储空间, TOKEN 是一种是服务器生成的身份验证凭证。Cookie 可以存储SessionID, 让服务器可以通过该 ID 找到对应的 session 数据；还可以存储 TOKEN, 客户端的请求中会携带 TOKEN,  由服务器来验证。"
    },
    {
        "category": "其他基础",
        "subcategory": "计算机网络",
        "question": "介绍一下浏览器LocalStorage和Cache区别。",
        "answer": "LocalStorage 的容量比较大，不会过期，不会随请求一起发送。而 Cache 容量小，可设置过期时间，会随着请求一起发送。"
    },
    {
        "category": "其他基础",
        "subcategory": "Linux",
        "question": "Linux的常用命令有哪些?",
        "answer": "常用的由文件管理/操作、系统进程管理、网络之类的指令, 比如find搜索文件、cat查看文件、grep过滤内容、tail查看文件末尾; ps查看进程状态、kill杀死进程、top查看进程资源占用、lsof查出占用该文件(比如端口)的进程; ifconfig查看网络接口参数、netstat查看网络连接信息比如端口、curl发送请求。"
    },
    {
        "category": "其他基础",
        "subcategory": "Linux",
        "question": "Shell脚本方面有哪些了解?",
        "answer": "语法基础​​变量定义与引用($var, ${var})、条件判断(if [ -f file ])、循环(for, while)、函数定义与调用、输入输出重定向(>, >>, 2>&1)。测试中使用Shell脚本的具体场景比如自动化部署、日志分析、批量执行测试用例、结果验证、监控和报告生成等。"
    },
    {
        "category": "其他基础",
        "subcategory": "操作系统",
        "question": "同步和异步是什么?",
        "answer": "同步任务按顺序执行，简单但低效。异步任务并发执行，复杂但高效，适合高并发场景。CPU 密集型用同步，I/O 密集型用异步。"
    },
    {
        "category": "其他基础",
        "subcategory": "Git",
        "question": "Git的常用命令有哪些?",
        "answer": "clone（拉取远程仓库）、add（暂存文件）、commit（提交修改）、push（推送至远程）、pull（拉取并合并更新）、branch（管理分支）、checkout（切换分支 / 恢复文件）、merge（合并分支）、status（查看状态）、diff（查看差异）、log（查看提交历史）。"
    },
    {
        "category": "其他基础",
        "subcategory": "Docker",
        "question": "Docker是什么? 和虚拟机有什么区别?",
        "answer": "Docker 是一个应用容器引擎, 可以让开发者将应用程序和环境依赖打包在一个可移植的容器之中, 之后可以在任何机器上搭建相同的环境。和虚拟机的区别主要在于层次不同, Docker共享宿主机的操作系统内核, 而虚拟机需要模拟硬件运行一个完整的操作系统, 所以 Docker 更加轻量化, 速度也更加快。"
    },
    {
        "category": "其他基础",
        "subcategory": "Docker",
        "question": "Docker的镜像和容器是什么?",
        "answer": "镜像是一个只读的模板, 包含了应用程序和环境依赖。容器是镜像的实例, 可以被启动、停止、删除。"
    },
    {
        "category": "其他基础",
        "subcategory": "Docker",
        "question": "Docker的常用命令有哪些?",
        "answer": "docker build 构建镜像; docker run 运行容器; docker ps 查看容器状态; docker stop 停止容器; docker start 启动容器; docker rm 删除容器; docker rmi 删除镜像; docker pull 拉取镜像; docker push 推送镜像; docker commit 提交容器为镜像; docker exec 进入容器。"
    },
    {
        "category": "开放性问题",
        "subcategory": "项目",
        "question": "在过去的项目中，你用 Python 解决了哪些复杂的测试问题？",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "项目",
        "question": "你在项目中遇到的最大挑战是什么？",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "项目",
        "question": "描述一个你设计的自动化测试框架，核心模块是什么？",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "工作",
        "question": "如果你提交了缺陷, 开发说这不是BUG怎么办?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你觉得你有什么优缺点?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你的职业规划是什么?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你为什么选择测试?",
        "answer": ""
    },
    {
        "category": "开放性问题",
        "subcategory": "个人",
        "question": "你有什么想问我的吗?",
        "answer": ""
    }
]